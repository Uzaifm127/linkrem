generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Using uuid instead of autoincrement for security
model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  HashPassword  HashPassword?
  links         Link[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sessionLinks  SessionLinks[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HashPassword {
  hashValue String
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id             String        @id @default(uuid())
  name           String        @unique
  url            String        @unique
  tags           Tag[]         @relation("LinkTag")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  sessionLinksId String?
  sessionLinks   SessionLinks? @relation(fields: [sessionLinksId], references: [id], onDelete: Cascade)
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(uuid())
  tagName   String   @unique
  locked    Boolean  @default(false)
  links     Link[]   @relation("LinkTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionLinks {
  id        String   @id @default(uuid())
  name      String   @unique
  links     Link[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
