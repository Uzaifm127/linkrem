generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Using uuid instead of autoincrement for security
model User {
  id            String        @id @default(uuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  HashPassword  HashPassword?
  links         Link[]

  // Making the relation of tags with user to prevent the duplication of tags for the same user
  tags         Tag[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  linkSessions LinkSessions[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HashPassword {
  hashValue String
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id        String    @id @default(uuid())
  name      String
  url       String
  tags      Tag[]     @relation("LinkTag")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shortcut  Shortcut?

  @@unique([name, userId])
}

model Shortcut {
  id          String   @id @default(uuid())
  shortcutKey String   
  linkId      String   @unique
  link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([shortcutKey, linkId])
}

model Tag {
  id        String   @id @default(uuid())
  tagName   String
  locked    Boolean  @default(false)
  links     Link[]   @relation("LinkTag")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tagName, userId])
}

model LinkSessions {
  id           String         @id @default(uuid())
  name         String
  sessionLinks SessionLinks[]
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([name, userId])
}

model SessionLinks {
  id            String       @id @default(uuid())
  name          String
  url           String
  linkSessionId String
  linkSession   LinkSessions @relation(fields: [linkSessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
